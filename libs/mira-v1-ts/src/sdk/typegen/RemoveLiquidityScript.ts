/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.96.1
*/

import {
  Account,
  BigNumberish,
  BN,
  decompressBytecode,
  Script,
  StrSlice,
} from 'fuels';

import type { Enum } from "./common";

export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;

export type RemoveLiquidityScriptInputs = [pool_id: [AssetIdInput, AssetIdInput, boolean], liquidity: BigNumberish, amount_0_min: BigNumberish, amount_1_min: BigNumberish, recipient: IdentityInput, deadline: BigNumberish];
export type RemoveLiquidityScriptOutput = [BN, BN];

export type RemoveLiquidityScriptConfigurables = Partial<{
  AMM_CONTRACT_ID: ContractIdInput;
}>;

const abi = {
  "programType": "script",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "(struct std::asset_id::AssetId, struct std::asset_id::AssetId, bool)",
      "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6",
      "metadataTypeId": 1
    },
    {
      "type": "(u64, u64)",
      "concreteTypeId": "41bd1a98f0a59642d8f824c805b798a5f268d1f7d05808eb05c4189c493f1be0",
      "metadataTypeId": 0
    },
    {
      "type": "enum std::identity::Identity",
      "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
      "metadataTypeId": 4
    },
    {
      "type": "str",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    },
    {
      "type": "struct std::contract_id::ContractId",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "metadataTypeId": 7
    },
    {
      "type": "u32",
      "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "(_, _)",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "(_, _, _)",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": 6
        },
        {
          "name": "__tuple_element",
          "typeId": 6
        },
        {
          "name": "__tuple_element",
          "typeId": 3
        }
      ]
    },
    {
      "type": "b256",
      "metadataTypeId": 2
    },
    {
      "type": "bool",
      "metadataTypeId": 3
    },
    {
      "type": "enum std::identity::Identity",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "Address",
          "typeId": 5
        },
        {
          "name": "ContractId",
          "typeId": 7
        }
      ]
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 5,
      "components": [
        {
          "name": "bits",
          "typeId": 2
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 6,
      "components": [
        {
          "name": "bits",
          "typeId": 2
        }
      ]
    },
    {
      "type": "struct std::contract_id::ContractId",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "bits",
          "typeId": 2
        }
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "pool_id",
          "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6"
        },
        {
          "name": "liquidity",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "amount_0_min",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "amount_1_min",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "recipient",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        },
        {
          "name": "deadline",
          "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
        }
      ],
      "name": "main",
      "output": "41bd1a98f0a59642d8f824c805b798a5f268d1f7d05808eb05c4189c493f1be0",
      "attributes": null
    }
  ],
  "loggedTypes": [
    {
      "logId": "10098701174489624218",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "AMM_CONTRACT_ID",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "offset": 7672
    }
  ]
};

const bytecode = decompressBytecode('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');

export class RemoveLiquidityScript extends Script<RemoveLiquidityScriptInputs, RemoveLiquidityScriptOutput> {

  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(wallet: Account) {
    super(bytecode, abi, wallet);
  }
}
