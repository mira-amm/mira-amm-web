/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from "@payloadcms/db-postgres";
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  varchar,
  serial,
  timestamp,
  boolean,
  numeric,
  jsonb,
  pgEnum,
} from "@payloadcms/db-postgres/drizzle/pg-core";
import {sql, relations} from "@payloadcms/db-postgres/drizzle";
export const enum_brands_status = pgEnum("enum_brands_status", [
  "draft",
  "published",
]);
export const enum__brands_v_version_status = pgEnum(
  "enum__brands_v_version_status",
  ["draft", "published"]
);
export const enum_users_roles = pgEnum("enum_users_roles", ["admin", "user"]);
export const enum_settings_status = pgEnum("enum_settings_status", [
  "draft",
  "published",
]);
export const enum__settings_v_version_status = pgEnum(
  "enum__settings_v_version_status",
  ["draft", "published"]
);

export const brands_links = pgTable(
  "brands_links",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name"),
    link: varchar("link"),
  },
  (columns) => ({
    _orderIdx: index("brands_links_order_idx").on(columns._order),
    _parentIDIdx: index("brands_links_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [brands.id],
      name: "brands_links_parent_id_fk",
    }).onDelete("cascade"),
  })
);

export const brands = pgTable(
  "brands",
  {
    id: serial("id").primaryKey(),
    symbol: integer("symbol_id").references(() => media.id, {
      onDelete: "set null",
    }),
    wordmark: integer("wordmark_id").references(() => media.id, {
      onDelete: "set null",
    }),
    name: varchar("name"),
    description: varchar("description"),
    domain: varchar("domain"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    _status: enum_brands_status("_status").default("draft"),
  },
  (columns) => ({
    brands_symbol_idx: index("brands_symbol_idx").on(columns.symbol),
    brands_wordmark_idx: index("brands_wordmark_idx").on(columns.wordmark),
    brands_updated_at_idx: index("brands_updated_at_idx").on(columns.updatedAt),
    brands_created_at_idx: index("brands_created_at_idx").on(columns.createdAt),
    brands__status_idx: index("brands__status_idx").on(columns._status),
  })
);

export const _brands_v_version_links = pgTable(
  "_brands_v_version_links",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    name: varchar("name"),
    link: varchar("link"),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_brands_v_version_links_order_idx").on(columns._order),
    _parentIDIdx: index("_brands_v_version_links_parent_id_idx").on(
      columns._parentID
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_brands_v.id],
      name: "_brands_v_version_links_parent_id_fk",
    }).onDelete("cascade"),
  })
);

export const _brands_v = pgTable(
  "_brands_v",
  {
    id: serial("id").primaryKey(),
    parent: integer("parent_id").references(() => brands.id, {
      onDelete: "set null",
    }),
    version_symbol: integer("version_symbol_id").references(() => media.id, {
      onDelete: "set null",
    }),
    version_wordmark: integer("version_wordmark_id").references(
      () => media.id,
      {
        onDelete: "set null",
      }
    ),
    version_name: varchar("version_name"),
    version_description: varchar("version_description"),
    version_domain: varchar("version_domain"),
    version_updatedAt: timestamp("version_updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp("version_created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version__status:
      enum__brands_v_version_status("version__status").default("draft"),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    latest: boolean("latest"),
  },
  (columns) => ({
    _brands_v_parent_idx: index("_brands_v_parent_idx").on(columns.parent),
    _brands_v_version_version_symbol_idx: index(
      "_brands_v_version_version_symbol_idx"
    ).on(columns.version_symbol),
    _brands_v_version_version_wordmark_idx: index(
      "_brands_v_version_version_wordmark_idx"
    ).on(columns.version_wordmark),
    _brands_v_version_version_updated_at_idx: index(
      "_brands_v_version_version_updated_at_idx"
    ).on(columns.version_updatedAt),
    _brands_v_version_version_created_at_idx: index(
      "_brands_v_version_version_created_at_idx"
    ).on(columns.version_createdAt),
    _brands_v_version_version__status_idx: index(
      "_brands_v_version_version__status_idx"
    ).on(columns.version__status),
    _brands_v_created_at_idx: index("_brands_v_created_at_idx").on(
      columns.createdAt
    ),
    _brands_v_updated_at_idx: index("_brands_v_updated_at_idx").on(
      columns.updatedAt
    ),
    _brands_v_latest_idx: index("_brands_v_latest_idx").on(columns.latest),
  })
);

export const media = pgTable(
  "media",
  {
    id: serial("id").primaryKey(),
    alt: varchar("alt").notNull(),
    prefix: varchar("prefix").default("media"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    url: varchar("url"),
    thumbnailURL: varchar("thumbnail_u_r_l"),
    filename: varchar("filename"),
    mimeType: varchar("mime_type"),
    filesize: numeric("filesize"),
    width: numeric("width"),
    height: numeric("height"),
    focalX: numeric("focal_x"),
    focalY: numeric("focal_y"),
  },
  (columns) => ({
    media_updated_at_idx: index("media_updated_at_idx").on(columns.updatedAt),
    media_created_at_idx: index("media_created_at_idx").on(columns.createdAt),
    media_filename_idx: uniqueIndex("media_filename_idx").on(columns.filename),
  })
);

export const games = pgTable(
  "games",
  {
    id: serial("id").primaryKey(),
    player: integer("player_id").references(() => users.id, {
      onDelete: "set null",
    }),
    score: numeric("score").notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    games_player_idx: index("games_player_idx").on(columns.player),
    games_score_idx: index("games_score_idx").on(columns.score),
    games_updated_at_idx: index("games_updated_at_idx").on(columns.updatedAt),
    games_created_at_idx: index("games_created_at_idx").on(columns.createdAt),
  })
);

export const users_roles = pgTable(
  "users_roles",
  {
    order: integer("order").notNull(),
    parent: integer("parent_id").notNull(),
    value: enum_users_roles("value"),
    id: serial("id").primaryKey(),
  },
  (columns) => ({
    orderIdx: index("users_roles_order_idx").on(columns.order),
    parentIdx: index("users_roles_parent_idx").on(columns.parent),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [users.id],
      name: "users_roles_parent_fk",
    }).onDelete("cascade"),
  })
);

export const users_sessions = pgTable(
  "users_sessions",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    expiresAt: timestamp("expires_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => ({
    _orderIdx: index("users_sessions_order_idx").on(columns._order),
    _parentIDIdx: index("users_sessions_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [users.id],
      name: "users_sessions_parent_id_fk",
    }).onDelete("cascade"),
  })
);

export const users = pgTable(
  "users",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    avatar: integer("avatar_id").references(() => media.id, {
      onDelete: "set null",
    }),
    walletAddress: varchar("wallet_address"),
    xUserName: varchar("x_user_name"),
    xUrl: varchar("x_url"),
    xIsIdentityVerified: boolean("x_is_identity_verified"),
    xVerified: boolean("x_verified"),
    sub: varchar("sub"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    email: varchar("email").notNull(),
    resetPasswordToken: varchar("reset_password_token"),
    resetPasswordExpiration: timestamp("reset_password_expiration", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar("salt"),
    hash: varchar("hash"),
    loginAttempts: numeric("login_attempts").default("0"),
    lockUntil: timestamp("lock_until", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    users_avatar_idx: index("users_avatar_idx").on(columns.avatar),
    users_sub_idx: index("users_sub_idx").on(columns.sub),
    users_updated_at_idx: index("users_updated_at_idx").on(columns.updatedAt),
    users_created_at_idx: index("users_created_at_idx").on(columns.createdAt),
    users_email_idx: uniqueIndex("users_email_idx").on(columns.email),
  })
);

export const payload_locked_documents = pgTable(
  "payload_locked_documents",
  {
    id: serial("id").primaryKey(),
    globalSlug: varchar("global_slug"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index(
      "payload_locked_documents_global_slug_idx"
    ).on(columns.globalSlug),
    payload_locked_documents_updated_at_idx: index(
      "payload_locked_documents_updated_at_idx"
    ).on(columns.updatedAt),
    payload_locked_documents_created_at_idx: index(
      "payload_locked_documents_created_at_idx"
    ).on(columns.createdAt),
  })
);

export const payload_locked_documents_rels = pgTable(
  "payload_locked_documents_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    brandsID: integer("brands_id"),
    mediaID: integer("media_id"),
    gamesID: integer("games_id"),
    usersID: integer("users_id"),
  },
  (columns) => ({
    order: index("payload_locked_documents_rels_order_idx").on(columns.order),
    parentIdx: index("payload_locked_documents_rels_parent_idx").on(
      columns.parent
    ),
    pathIdx: index("payload_locked_documents_rels_path_idx").on(columns.path),
    payload_locked_documents_rels_brands_id_idx: index(
      "payload_locked_documents_rels_brands_id_idx"
    ).on(columns.brandsID),
    payload_locked_documents_rels_media_id_idx: index(
      "payload_locked_documents_rels_media_id_idx"
    ).on(columns.mediaID),
    payload_locked_documents_rels_games_id_idx: index(
      "payload_locked_documents_rels_games_id_idx"
    ).on(columns.gamesID),
    payload_locked_documents_rels_users_id_idx: index(
      "payload_locked_documents_rels_users_id_idx"
    ).on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_locked_documents.id],
      name: "payload_locked_documents_rels_parent_fk",
    }).onDelete("cascade"),
    brandsIdFk: foreignKey({
      columns: [columns["brandsID"]],
      foreignColumns: [brands.id],
      name: "payload_locked_documents_rels_brands_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "payload_locked_documents_rels_media_fk",
    }).onDelete("cascade"),
    gamesIdFk: foreignKey({
      columns: [columns["gamesID"]],
      foreignColumns: [games.id],
      name: "payload_locked_documents_rels_games_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_locked_documents_rels_users_fk",
    }).onDelete("cascade"),
  })
);

export const payload_preferences = pgTable(
  "payload_preferences",
  {
    id: serial("id").primaryKey(),
    key: varchar("key"),
    value: jsonb("value"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index("payload_preferences_key_idx").on(
      columns.key
    ),
    payload_preferences_updated_at_idx: index(
      "payload_preferences_updated_at_idx"
    ).on(columns.updatedAt),
    payload_preferences_created_at_idx: index(
      "payload_preferences_created_at_idx"
    ).on(columns.createdAt),
  })
);

export const payload_preferences_rels = pgTable(
  "payload_preferences_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
  },
  (columns) => ({
    order: index("payload_preferences_rels_order_idx").on(columns.order),
    parentIdx: index("payload_preferences_rels_parent_idx").on(columns.parent),
    pathIdx: index("payload_preferences_rels_path_idx").on(columns.path),
    payload_preferences_rels_users_id_idx: index(
      "payload_preferences_rels_users_id_idx"
    ).on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_preferences.id],
      name: "payload_preferences_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_preferences_rels_users_fk",
    }).onDelete("cascade"),
  })
);

export const payload_migrations = pgTable(
  "payload_migrations",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    batch: numeric("batch"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index(
      "payload_migrations_updated_at_idx"
    ).on(columns.updatedAt),
    payload_migrations_created_at_idx: index(
      "payload_migrations_created_at_idx"
    ).on(columns.createdAt),
  })
);

export const settings_microgame_login_text = pgTable(
  "settings_microgame_login_text",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name"),
    text: varchar("text"),
  },
  (columns) => ({
    _orderIdx: index("settings_microgame_login_text_order_idx").on(
      columns._order
    ),
    _parentIDIdx: index("settings_microgame_login_text_parent_id_idx").on(
      columns._parentID
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [settings.id],
      name: "settings_microgame_login_text_parent_id_fk",
    }).onDelete("cascade"),
  })
);

export const settings_microgame_options = pgTable(
  "settings_microgame_options",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    option: varchar("option"),
    description: varchar("description"),
  },
  (columns) => ({
    _orderIdx: index("settings_microgame_options_order_idx").on(columns._order),
    _parentIDIdx: index("settings_microgame_options_parent_id_idx").on(
      columns._parentID
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [settings.id],
      name: "settings_microgame_options_parent_id_fk",
    }).onDelete("cascade"),
  })
);

export const settings_microgame_notes = pgTable(
  "settings_microgame_notes",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    title: varchar("title"),
    description: varchar("description"),
  },
  (columns) => ({
    _orderIdx: index("settings_microgame_notes_order_idx").on(columns._order),
    _parentIDIdx: index("settings_microgame_notes_parent_id_idx").on(
      columns._parentID
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [settings.id],
      name: "settings_microgame_notes_parent_id_fk",
    }).onDelete("cascade"),
  })
);

export const settings_microgame_instructions = pgTable(
  "settings_microgame_instructions",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    instruction: varchar("instruction"),
  },
  (columns) => ({
    _orderIdx: index("settings_microgame_instructions_order_idx").on(
      columns._order
    ),
    _parentIDIdx: index("settings_microgame_instructions_parent_id_idx").on(
      columns._parentID
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [settings.id],
      name: "settings_microgame_instructions_parent_id_fk",
    }).onDelete("cascade"),
  })
);

export const settings = pgTable(
  "settings",
  {
    id: serial("id").primaryKey(),
    microgame_login_logo: integer("microgame_login_logo_id").references(
      () => media.id,
      {
        onDelete: "set null",
      }
    ),
    microgame_title: varchar("microgame_title"),
    microgame_lastLogin: varchar("microgame_last_login"),
    microgame_welcome: varchar("microgame_welcome"),
    microgame_help: varchar("microgame_help"),
    microgame_optionsTitle: varchar("microgame_options_title"),
    microgame_sectionTitle: varchar("microgame_section_title"),
    microgame_subtitle: varchar("microgame_subtitle"),
    microgame_tradingInstructionsTitle: varchar(
      "microgame_trading_instructions_title"
    ),
    _status: enum_settings_status("_status").default("draft"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    settings_microgame_login_microgame_login_logo_idx: index(
      "settings_microgame_login_microgame_login_logo_idx"
    ).on(columns.microgame_login_logo),
    settings__status_idx: index("settings__status_idx").on(columns._status),
  })
);

export const _settings_v_version_microgame_login_text = pgTable(
  "_settings_v_version_microgame_login_text",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    name: varchar("name"),
    text: varchar("text"),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_settings_v_version_microgame_login_text_order_idx").on(
      columns._order
    ),
    _parentIDIdx: index(
      "_settings_v_version_microgame_login_text_parent_id_idx"
    ).on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_settings_v.id],
      name: "_settings_v_version_microgame_login_text_parent_id_fk",
    }).onDelete("cascade"),
  })
);

export const _settings_v_version_microgame_options = pgTable(
  "_settings_v_version_microgame_options",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    option: varchar("option"),
    description: varchar("description"),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_settings_v_version_microgame_options_order_idx").on(
      columns._order
    ),
    _parentIDIdx: index(
      "_settings_v_version_microgame_options_parent_id_idx"
    ).on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_settings_v.id],
      name: "_settings_v_version_microgame_options_parent_id_fk",
    }).onDelete("cascade"),
  })
);

export const _settings_v_version_microgame_notes = pgTable(
  "_settings_v_version_microgame_notes",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    title: varchar("title"),
    description: varchar("description"),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_settings_v_version_microgame_notes_order_idx").on(
      columns._order
    ),
    _parentIDIdx: index("_settings_v_version_microgame_notes_parent_id_idx").on(
      columns._parentID
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_settings_v.id],
      name: "_settings_v_version_microgame_notes_parent_id_fk",
    }).onDelete("cascade"),
  })
);

export const _settings_v_version_microgame_instructions = pgTable(
  "_settings_v_version_microgame_instructions",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    instruction: varchar("instruction"),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_settings_v_version_microgame_instructions_order_idx").on(
      columns._order
    ),
    _parentIDIdx: index(
      "_settings_v_version_microgame_instructions_parent_id_idx"
    ).on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_settings_v.id],
      name: "_settings_v_version_microgame_instructions_parent_id_fk",
    }).onDelete("cascade"),
  })
);

export const _settings_v = pgTable(
  "_settings_v",
  {
    id: serial("id").primaryKey(),
    version_microgame_login_logo: integer(
      "version_microgame_login_logo_id"
    ).references(() => media.id, {
      onDelete: "set null",
    }),
    version_microgame_title: varchar("version_microgame_title"),
    version_microgame_lastLogin: varchar("version_microgame_last_login"),
    version_microgame_welcome: varchar("version_microgame_welcome"),
    version_microgame_help: varchar("version_microgame_help"),
    version_microgame_optionsTitle: varchar("version_microgame_options_title"),
    version_microgame_sectionTitle: varchar("version_microgame_section_title"),
    version_microgame_subtitle: varchar("version_microgame_subtitle"),
    version_microgame_tradingInstructionsTitle: varchar(
      "version_microgame_trading_instructions_title"
    ),
    version__status:
      enum__settings_v_version_status("version__status").default("draft"),
    version_updatedAt: timestamp("version_updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp("version_created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    latest: boolean("latest"),
  },
  (columns) => ({
    _settings_v_version_microgame_login_version_microgame_login_logo_idx: index(
      "_settings_v_version_microgame_login_version_microgame_login_logo_idx"
    ).on(columns.version_microgame_login_logo),
    _settings_v_version_version__status_idx: index(
      "_settings_v_version_version__status_idx"
    ).on(columns.version__status),
    _settings_v_created_at_idx: index("_settings_v_created_at_idx").on(
      columns.createdAt
    ),
    _settings_v_updated_at_idx: index("_settings_v_updated_at_idx").on(
      columns.updatedAt
    ),
    _settings_v_latest_idx: index("_settings_v_latest_idx").on(columns.latest),
  })
);

export const relations_brands_links = relations(brands_links, ({one}) => ({
  _parentID: one(brands, {
    fields: [brands_links._parentID],
    references: [brands.id],
    relationName: "links",
  }),
}));
export const relations_brands = relations(brands, ({one, many}) => ({
  symbol: one(media, {
    fields: [brands.symbol],
    references: [media.id],
    relationName: "symbol",
  }),
  wordmark: one(media, {
    fields: [brands.wordmark],
    references: [media.id],
    relationName: "wordmark",
  }),
  links: many(brands_links, {
    relationName: "links",
  }),
}));
export const relations__brands_v_version_links = relations(
  _brands_v_version_links,
  ({one}) => ({
    _parentID: one(_brands_v, {
      fields: [_brands_v_version_links._parentID],
      references: [_brands_v.id],
      relationName: "version_links",
    }),
  })
);
export const relations__brands_v = relations(_brands_v, ({one, many}) => ({
  parent: one(brands, {
    fields: [_brands_v.parent],
    references: [brands.id],
    relationName: "parent",
  }),
  version_symbol: one(media, {
    fields: [_brands_v.version_symbol],
    references: [media.id],
    relationName: "version_symbol",
  }),
  version_wordmark: one(media, {
    fields: [_brands_v.version_wordmark],
    references: [media.id],
    relationName: "version_wordmark",
  }),
  version_links: many(_brands_v_version_links, {
    relationName: "version_links",
  }),
}));
export const relations_media = relations(media, () => ({}));
export const relations_games = relations(games, ({one}) => ({
  player: one(users, {
    fields: [games.player],
    references: [users.id],
    relationName: "player",
  }),
}));
export const relations_users_roles = relations(users_roles, ({one}) => ({
  parent: one(users, {
    fields: [users_roles.parent],
    references: [users.id],
    relationName: "roles",
  }),
}));
export const relations_users_sessions = relations(users_sessions, ({one}) => ({
  _parentID: one(users, {
    fields: [users_sessions._parentID],
    references: [users.id],
    relationName: "sessions",
  }),
}));
export const relations_users = relations(users, ({one, many}) => ({
  roles: many(users_roles, {
    relationName: "roles",
  }),
  avatar: one(media, {
    fields: [users.avatar],
    references: [media.id],
    relationName: "avatar",
  }),
  sessions: many(users_sessions, {
    relationName: "sessions",
  }),
}));
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({one}) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: "_rels",
    }),
    brandsID: one(brands, {
      fields: [payload_locked_documents_rels.brandsID],
      references: [brands.id],
      relationName: "brands",
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: "media",
    }),
    gamesID: one(games, {
      fields: [payload_locked_documents_rels.gamesID],
      references: [games.id],
      relationName: "games",
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  })
);
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({many}) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: "_rels",
    }),
  })
);
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({one}) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  })
);
export const relations_payload_preferences = relations(
  payload_preferences,
  ({many}) => ({
    _rels: many(payload_preferences_rels, {
      relationName: "_rels",
    }),
  })
);
export const relations_payload_migrations = relations(
  payload_migrations,
  () => ({})
);
export const relations_settings_microgame_login_text = relations(
  settings_microgame_login_text,
  ({one}) => ({
    _parentID: one(settings, {
      fields: [settings_microgame_login_text._parentID],
      references: [settings.id],
      relationName: "microgame_login_text",
    }),
  })
);
export const relations_settings_microgame_options = relations(
  settings_microgame_options,
  ({one}) => ({
    _parentID: one(settings, {
      fields: [settings_microgame_options._parentID],
      references: [settings.id],
      relationName: "microgame_options",
    }),
  })
);
export const relations_settings_microgame_notes = relations(
  settings_microgame_notes,
  ({one}) => ({
    _parentID: one(settings, {
      fields: [settings_microgame_notes._parentID],
      references: [settings.id],
      relationName: "microgame_notes",
    }),
  })
);
export const relations_settings_microgame_instructions = relations(
  settings_microgame_instructions,
  ({one}) => ({
    _parentID: one(settings, {
      fields: [settings_microgame_instructions._parentID],
      references: [settings.id],
      relationName: "microgame_instructions",
    }),
  })
);
export const relations_settings = relations(settings, ({one, many}) => ({
  microgame_login_logo: one(media, {
    fields: [settings.microgame_login_logo],
    references: [media.id],
    relationName: "microgame_login_logo",
  }),
  microgame_login_text: many(settings_microgame_login_text, {
    relationName: "microgame_login_text",
  }),
  microgame_options: many(settings_microgame_options, {
    relationName: "microgame_options",
  }),
  microgame_notes: many(settings_microgame_notes, {
    relationName: "microgame_notes",
  }),
  microgame_instructions: many(settings_microgame_instructions, {
    relationName: "microgame_instructions",
  }),
}));
export const relations__settings_v_version_microgame_login_text = relations(
  _settings_v_version_microgame_login_text,
  ({one}) => ({
    _parentID: one(_settings_v, {
      fields: [_settings_v_version_microgame_login_text._parentID],
      references: [_settings_v.id],
      relationName: "version_microgame_login_text",
    }),
  })
);
export const relations__settings_v_version_microgame_options = relations(
  _settings_v_version_microgame_options,
  ({one}) => ({
    _parentID: one(_settings_v, {
      fields: [_settings_v_version_microgame_options._parentID],
      references: [_settings_v.id],
      relationName: "version_microgame_options",
    }),
  })
);
export const relations__settings_v_version_microgame_notes = relations(
  _settings_v_version_microgame_notes,
  ({one}) => ({
    _parentID: one(_settings_v, {
      fields: [_settings_v_version_microgame_notes._parentID],
      references: [_settings_v.id],
      relationName: "version_microgame_notes",
    }),
  })
);
export const relations__settings_v_version_microgame_instructions = relations(
  _settings_v_version_microgame_instructions,
  ({one}) => ({
    _parentID: one(_settings_v, {
      fields: [_settings_v_version_microgame_instructions._parentID],
      references: [_settings_v.id],
      relationName: "version_microgame_instructions",
    }),
  })
);
export const relations__settings_v = relations(_settings_v, ({one, many}) => ({
  version_microgame_login_logo: one(media, {
    fields: [_settings_v.version_microgame_login_logo],
    references: [media.id],
    relationName: "version_microgame_login_logo",
  }),
  version_microgame_login_text: many(_settings_v_version_microgame_login_text, {
    relationName: "version_microgame_login_text",
  }),
  version_microgame_options: many(_settings_v_version_microgame_options, {
    relationName: "version_microgame_options",
  }),
  version_microgame_notes: many(_settings_v_version_microgame_notes, {
    relationName: "version_microgame_notes",
  }),
  version_microgame_instructions: many(
    _settings_v_version_microgame_instructions,
    {
      relationName: "version_microgame_instructions",
    }
  ),
}));

type DatabaseSchema = {
  enum_brands_status: typeof enum_brands_status;
  enum__brands_v_version_status: typeof enum__brands_v_version_status;
  enum_users_roles: typeof enum_users_roles;
  enum_settings_status: typeof enum_settings_status;
  enum__settings_v_version_status: typeof enum__settings_v_version_status;
  brands_links: typeof brands_links;
  brands: typeof brands;
  _brands_v_version_links: typeof _brands_v_version_links;
  _brands_v: typeof _brands_v;
  media: typeof media;
  games: typeof games;
  users_roles: typeof users_roles;
  users_sessions: typeof users_sessions;
  users: typeof users;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  settings_microgame_login_text: typeof settings_microgame_login_text;
  settings_microgame_options: typeof settings_microgame_options;
  settings_microgame_notes: typeof settings_microgame_notes;
  settings_microgame_instructions: typeof settings_microgame_instructions;
  settings: typeof settings;
  _settings_v_version_microgame_login_text: typeof _settings_v_version_microgame_login_text;
  _settings_v_version_microgame_options: typeof _settings_v_version_microgame_options;
  _settings_v_version_microgame_notes: typeof _settings_v_version_microgame_notes;
  _settings_v_version_microgame_instructions: typeof _settings_v_version_microgame_instructions;
  _settings_v: typeof _settings_v;
  relations_brands_links: typeof relations_brands_links;
  relations_brands: typeof relations_brands;
  relations__brands_v_version_links: typeof relations__brands_v_version_links;
  relations__brands_v: typeof relations__brands_v;
  relations_media: typeof relations_media;
  relations_games: typeof relations_games;
  relations_users_roles: typeof relations_users_roles;
  relations_users_sessions: typeof relations_users_sessions;
  relations_users: typeof relations_users;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
  relations_settings_microgame_login_text: typeof relations_settings_microgame_login_text;
  relations_settings_microgame_options: typeof relations_settings_microgame_options;
  relations_settings_microgame_notes: typeof relations_settings_microgame_notes;
  relations_settings_microgame_instructions: typeof relations_settings_microgame_instructions;
  relations_settings: typeof relations_settings;
  relations__settings_v_version_microgame_login_text: typeof relations__settings_v_version_microgame_login_text;
  relations__settings_v_version_microgame_options: typeof relations__settings_v_version_microgame_options;
  relations__settings_v_version_microgame_notes: typeof relations__settings_v_version_microgame_notes;
  relations__settings_v_version_microgame_instructions: typeof relations__settings_v_version_microgame_instructions;
  relations__settings_v: typeof relations__settings_v;
};

declare module "@payloadcms/db-postgres" {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
