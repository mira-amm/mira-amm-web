/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.101.2
*/

import {Contract as __Contract, Interface} from "fuels";
import type {
  Provider,
  Account,
  StorageSlot,
  Address,
  BigNumberish,
  BN,
  FunctionFragment,
  InvokeFunction,
} from "fuels";

import type {Enum, Vec} from "./common";

export type IdentityInput = Enum<{
  Address: AddressInput;
  ContractId: ContractIdInput;
}>;
export type IdentityOutput = Enum<{
  Address: AddressOutput;
  ContractId: ContractIdOutput;
}>;

export type AddressInput = {bits: string};
export type AddressOutput = AddressInput;
export type AssetIdInput = {bits: string};
export type AssetIdOutput = AssetIdInput;
export type BurnLiquidityArgsInput = {
  lp_assets: Vec<AssetIdInput>;
  to: IdentityInput;
};
export type BurnLiquidityArgsOutput = {
  lp_assets: Vec<AssetIdOutput>;
  to: IdentityOutput;
};
export type ContractIdInput = {bits: string};
export type ContractIdOutput = ContractIdInput;
export type LiquidityConfigInput = {
  bin_id: BigNumberish;
  distribution_x: BigNumberish;
  distribution_y: BigNumberish;
};
export type LiquidityConfigOutput = {
  bin_id: number;
  distribution_x: number;
  distribution_y: number;
};
export type MintLiquidityArgsInput = {
  pool_id: BigNumberish;
  liquidity_configs: Vec<LiquidityConfigInput>;
  to: IdentityInput;
  refund_to: IdentityInput;
};
export type MintLiquidityArgsOutput = {
  pool_id: BN;
  liquidity_configs: Vec<LiquidityConfigOutput>;
  to: IdentityOutput;
  refund_to: IdentityOutput;
};
export type SwapArgsInput = {
  pool_id: BigNumberish;
  swap_for_y: boolean;
  to: IdentityInput;
};
export type SwapArgsOutput = {
  pool_id: BN;
  swap_for_y: boolean;
  to: IdentityOutput;
};

const abi = {
  programType: "contract",
  specVersion: "1.1",
  encodingVersion: "1",
  concreteTypes: [
    {
      type: "()",
      concreteTypeId:
        "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
    },
    {
      type: "struct interfaces::amm::BurnLiquidityArgs",
      concreteTypeId:
        "17f7812db9a606b80fb81991f1ede490c5c2bcfed1546035964671f60459d91a",
      metadataTypeId: 5,
    },
    {
      type: "struct interfaces::amm::MintLiquidityArgs",
      concreteTypeId:
        "0f6e3b13b49f7d12df3eb6c918e267d8899fe54f5d2c1c6d3a5d937858f8802d",
      metadataTypeId: 7,
    },
    {
      type: "struct interfaces::amm::SwapArgs",
      concreteTypeId:
        "d89d603fde2e4425aca4c360f29c6da38fd5247d267cddcf4fc28dc5a15869f5",
      metadataTypeId: 8,
    },
  ],
  metadataTypes: [
    {
      type: "b256",
      metadataTypeId: 0,
    },
    {
      type: "bool",
      metadataTypeId: 1,
    },
    {
      type: "enum std::identity::Identity",
      metadataTypeId: 2,
      components: [
        {
          name: "Address",
          typeId: 9,
        },
        {
          name: "ContractId",
          typeId: 11,
        },
      ],
    },
    {
      type: "generic T",
      metadataTypeId: 3,
    },
    {
      type: "raw untyped ptr",
      metadataTypeId: 4,
    },
    {
      type: "struct interfaces::amm::BurnLiquidityArgs",
      metadataTypeId: 5,
      components: [
        {
          name: "lp_assets",
          typeId: 13,
          typeArguments: [
            {
              name: "",
              typeId: 10,
            },
          ],
        },
        {
          name: "to",
          typeId: 2,
        },
      ],
    },
    {
      type: "struct interfaces::amm::LiquidityConfig",
      metadataTypeId: 6,
      components: [
        {
          name: "bin_id",
          typeId: 16,
        },
        {
          name: "distribution_x",
          typeId: 14,
        },
        {
          name: "distribution_y",
          typeId: 14,
        },
      ],
    },
    {
      type: "struct interfaces::amm::MintLiquidityArgs",
      metadataTypeId: 7,
      components: [
        {
          name: "pool_id",
          typeId: 15,
        },
        {
          name: "liquidity_configs",
          typeId: 13,
          typeArguments: [
            {
              name: "",
              typeId: 6,
            },
          ],
        },
        {
          name: "to",
          typeId: 2,
        },
        {
          name: "refund_to",
          typeId: 2,
        },
      ],
    },
    {
      type: "struct interfaces::amm::SwapArgs",
      metadataTypeId: 8,
      components: [
        {
          name: "pool_id",
          typeId: 15,
        },
        {
          name: "swap_for_y",
          typeId: 1,
        },
        {
          name: "to",
          typeId: 2,
        },
      ],
    },
    {
      type: "struct std::address::Address",
      metadataTypeId: 9,
      components: [
        {
          name: "bits",
          typeId: 0,
        },
      ],
    },
    {
      type: "struct std::asset_id::AssetId",
      metadataTypeId: 10,
      components: [
        {
          name: "bits",
          typeId: 0,
        },
      ],
    },
    {
      type: "struct std::contract_id::ContractId",
      metadataTypeId: 11,
      components: [
        {
          name: "bits",
          typeId: 0,
        },
      ],
    },
    {
      type: "struct std::vec::RawVec",
      metadataTypeId: 12,
      components: [
        {
          name: "ptr",
          typeId: 4,
        },
        {
          name: "cap",
          typeId: 17,
        },
      ],
      typeParameters: [3],
    },
    {
      type: "struct std::vec::Vec",
      metadataTypeId: 13,
      components: [
        {
          name: "buf",
          typeId: 12,
          typeArguments: [
            {
              name: "",
              typeId: 3,
            },
          ],
        },
        {
          name: "len",
          typeId: 17,
        },
      ],
      typeParameters: [3],
    },
    {
      type: "u16",
      metadataTypeId: 14,
    },
    {
      type: "u256",
      metadataTypeId: 15,
    },
    {
      type: "u32",
      metadataTypeId: 16,
    },
    {
      type: "u64",
      metadataTypeId: 17,
    },
  ],
  functions: [
    {
      name: "after_burn_liquidity",
      inputs: [
        {
          name: "_args",
          concreteTypeId:
            "17f7812db9a606b80fb81991f1ede490c5c2bcfed1546035964671f60459d91a",
        },
      ],
      output:
        "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      attributes: [
        {
          name: "doc-comment",
          arguments: [" Called after liquidity burning completes"],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [" # Arguments"],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [
            " * `args` - The burn liquidity arguments that were used for the operation",
          ],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [" # Reverts"],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [
            " * When the hook contract decides the operation should be invalidated",
          ],
        },
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      name: "after_mint_liquidity",
      inputs: [
        {
          name: "_args",
          concreteTypeId:
            "0f6e3b13b49f7d12df3eb6c918e267d8899fe54f5d2c1c6d3a5d937858f8802d",
        },
      ],
      output:
        "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      attributes: [
        {
          name: "doc-comment",
          arguments: [" Called after liquidity minting completes"],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [" # Arguments"],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [
            " * `args` - The mint liquidity arguments that were used for the operation",
          ],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [" # Reverts"],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [
            " * When the hook contract decides the operation should be invalidated",
          ],
        },
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      name: "after_swap",
      inputs: [
        {
          name: "_args",
          concreteTypeId:
            "d89d603fde2e4425aca4c360f29c6da38fd5247d267cddcf4fc28dc5a15869f5",
        },
      ],
      output:
        "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      attributes: [
        {
          name: "doc-comment",
          arguments: [" Called after a swap operation completes"],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [" # Arguments"],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [
            " * `args` - The swap arguments that were used for the operation",
          ],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [" # Reverts"],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [
            " * When the hook contract decides the operation should be invalidated",
          ],
        },
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
  ],
  loggedTypes: [],
  messagesTypes: [],
  configurables: [],
  errorCodes: {},
};

const storageSlots: StorageSlot[] = [];

export class BasicHookInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    after_burn_liquidity: FunctionFragment;
    after_mint_liquidity: FunctionFragment;
    after_swap: FunctionFragment;
  };
}

export class BasicHook extends __Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: BasicHookInterface;
  declare functions: {
    after_burn_liquidity: InvokeFunction<[_args: BurnLiquidityArgsInput], void>;
    after_mint_liquidity: InvokeFunction<[_args: MintLiquidityArgsInput], void>;
    after_swap: InvokeFunction<[_args: SwapArgsInput], void>;
  };

  constructor(id: string | Address, accountOrProvider: Account | Provider) {
    super(id, abi, accountOrProvider);
  }
}
