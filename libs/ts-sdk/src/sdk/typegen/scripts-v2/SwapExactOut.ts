/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.101.2
*/

import {
  Account,
  BigNumberish,
  BN,
  decompressBytecode,
  Script as __Script,
  StrSlice,
} from "fuels";

import type {Enum, Vec} from "./common";

export type IdentityInput = Enum<{
  Address: AddressInput;
  ContractId: ContractIdInput;
}>;
export type IdentityOutput = Enum<{
  Address: AddressOutput;
  ContractId: ContractIdOutput;
}>;
export enum PoolCurveStateScriptErrorInput {
  InvalidParameters = "InvalidParameters",
  PoolNotFound = "PoolNotFound",
  ZeroAddress = "ZeroAddress",
  InvalidPool = "InvalidPool",
  InvalidIdSlippage = "InvalidIdSlippage",
  InvalidAsset = "InvalidAsset",
  InsufficientAmountX = "InsufficientAmountX",
  InsufficientAmountY = "InsufficientAmountY",
  InvalidPath = "InvalidPath",
  InvalidAmountIn = "InvalidAmountIn",
  InsufficientOutputAmount = "InsufficientOutputAmount",
}
export enum PoolCurveStateScriptErrorOutput {
  InvalidParameters = "InvalidParameters",
  PoolNotFound = "PoolNotFound",
  ZeroAddress = "ZeroAddress",
  InvalidPool = "InvalidPool",
  InvalidIdSlippage = "InvalidIdSlippage",
  InvalidAsset = "InvalidAsset",
  InsufficientAmountX = "InsufficientAmountX",
  InsufficientAmountY = "InsufficientAmountY",
  InvalidPath = "InvalidPath",
  InvalidAmountIn = "InvalidAmountIn",
  InsufficientOutputAmount = "InsufficientOutputAmount",
}

export type AddressInput = {bits: string};
export type AddressOutput = AddressInput;
export type AssetInput = {id: AssetIdInput; amount: BigNumberish};
export type AssetOutput = {id: AssetIdOutput; amount: BN};
export type AssetIdInput = {bits: string};
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = {bits: string};
export type ContractIdOutput = ContractIdInput;

export type SwapExactOutInputs = [
  amount_out: BigNumberish,
  asset_in: AssetIdInput,
  asset_out: AssetIdInput,
  amount_in_max: BigNumberish,
  path: Vec<BigNumberish>,
  recipient: IdentityInput,
  deadline: BigNumberish,
];
export type SwapExactOutOutput = Vec<[BN, BN, AssetOutput, AssetOutput]>;

export type SwapExactOutConfigurables = Partial<{
  POOL_CURVE_STATE: ContractIdInput;
}>;

const abi = {
  programType: "script",
  specVersion: "1.1",
  encodingVersion: "1",
  concreteTypes: [
    {
      type: "(u64, u64, struct interfaces::amm::Asset, struct interfaces::amm::Asset)",
      concreteTypeId:
        "2a4549dd9a03d84d837cb77cdd967790ab13258e2ad2a208438af998897fdb0a",
      metadataTypeId: 1,
    },
    {
      type: "enum scripts_common::PoolCurveStateScriptError",
      concreteTypeId:
        "ba45a2ad0355e6a9ab4059f00cf03a1b23352843875b2a1550fbddf2b566a085",
      metadataTypeId: 3,
    },
    {
      type: "enum std::identity::Identity",
      concreteTypeId:
        "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
      metadataTypeId: 4,
    },
    {
      type: "str",
      concreteTypeId:
        "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a",
    },
    {
      type: "struct std::asset_id::AssetId",
      concreteTypeId:
        "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
      metadataTypeId: 9,
    },
    {
      type: "struct std::contract_id::ContractId",
      concreteTypeId:
        "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      metadataTypeId: 10,
    },
    {
      type: "struct std::vec::Vec<(u64, u64, struct interfaces::amm::Asset, struct interfaces::amm::Asset)>",
      concreteTypeId:
        "beef34786f22697706987701bc9c347ca8d37cbc26941dc281104437fe41e621",
      metadataTypeId: 12,
      typeArguments: [
        "2a4549dd9a03d84d837cb77cdd967790ab13258e2ad2a208438af998897fdb0a",
      ],
    },
    {
      type: "struct std::vec::Vec<u256>",
      concreteTypeId:
        "742d7b76206a39cfad7eaec9b457390bbd0a92fe1da596db414daa0e4964bf82",
      metadataTypeId: 12,
      typeArguments: [
        "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e",
      ],
    },
    {
      type: "u256",
      concreteTypeId:
        "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e",
    },
    {
      type: "u64",
      concreteTypeId:
        "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
    },
  ],
  metadataTypes: [
    {
      type: "()",
      metadataTypeId: 0,
    },
    {
      type: "(_, _, _, _)",
      metadataTypeId: 1,
      components: [
        {
          name: "__tuple_element",
          typeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
        {
          name: "__tuple_element",
          typeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
        {
          name: "__tuple_element",
          typeId: 7,
        },
        {
          name: "__tuple_element",
          typeId: 7,
        },
      ],
    },
    {
      type: "b256",
      metadataTypeId: 2,
    },
    {
      type: "enum scripts_common::PoolCurveStateScriptError",
      metadataTypeId: 3,
      components: [
        {
          name: "InvalidParameters",
          typeId: 0,
        },
        {
          name: "PoolNotFound",
          typeId: 0,
        },
        {
          name: "ZeroAddress",
          typeId: 0,
        },
        {
          name: "InvalidPool",
          typeId: 0,
        },
        {
          name: "InvalidIdSlippage",
          typeId: 0,
        },
        {
          name: "InvalidAsset",
          typeId: 0,
        },
        {
          name: "InsufficientAmountX",
          typeId: 0,
        },
        {
          name: "InsufficientAmountY",
          typeId: 0,
        },
        {
          name: "InvalidPath",
          typeId: 0,
        },
        {
          name: "InvalidAmountIn",
          typeId: 0,
        },
        {
          name: "InsufficientOutputAmount",
          typeId: 0,
        },
      ],
    },
    {
      type: "enum std::identity::Identity",
      metadataTypeId: 4,
      components: [
        {
          name: "Address",
          typeId: 8,
        },
        {
          name: "ContractId",
          typeId: 10,
        },
      ],
    },
    {
      type: "generic T",
      metadataTypeId: 5,
    },
    {
      type: "raw untyped ptr",
      metadataTypeId: 6,
    },
    {
      type: "struct interfaces::amm::Asset",
      metadataTypeId: 7,
      components: [
        {
          name: "id",
          typeId: 9,
        },
        {
          name: "amount",
          typeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
      ],
    },
    {
      type: "struct std::address::Address",
      metadataTypeId: 8,
      components: [
        {
          name: "bits",
          typeId: 2,
        },
      ],
    },
    {
      type: "struct std::asset_id::AssetId",
      metadataTypeId: 9,
      components: [
        {
          name: "bits",
          typeId: 2,
        },
      ],
    },
    {
      type: "struct std::contract_id::ContractId",
      metadataTypeId: 10,
      components: [
        {
          name: "bits",
          typeId: 2,
        },
      ],
    },
    {
      type: "struct std::vec::RawVec",
      metadataTypeId: 11,
      components: [
        {
          name: "ptr",
          typeId: 6,
        },
        {
          name: "cap",
          typeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
      ],
      typeParameters: [5],
    },
    {
      type: "struct std::vec::Vec",
      metadataTypeId: 12,
      components: [
        {
          name: "buf",
          typeId: 11,
          typeArguments: [
            {
              name: "",
              typeId: 5,
            },
          ],
        },
        {
          name: "len",
          typeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
      ],
      typeParameters: [5],
    },
  ],
  functions: [
    {
      name: "main",
      inputs: [
        {
          name: "amount_out",
          concreteTypeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
        {
          name: "asset_in",
          concreteTypeId:
            "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
        },
        {
          name: "asset_out",
          concreteTypeId:
            "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
        },
        {
          name: "amount_in_max",
          concreteTypeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
        {
          name: "path",
          concreteTypeId:
            "742d7b76206a39cfad7eaec9b457390bbd0a92fe1da596db414daa0e4964bf82",
        },
        {
          name: "recipient",
          concreteTypeId:
            "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
        },
        {
          name: "deadline",
          concreteTypeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
      ],
      output:
        "beef34786f22697706987701bc9c347ca8d37cbc26941dc281104437fe41e621",
      attributes: [
        {
          name: "doc-comment",
          arguments: [" Executes a swap with exact output amount"],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [
            " This function performs a multi-hop swap operation where the user specifies exactly how much",
          ],
        },
        {
          name: "doc-comment",
          arguments: [
            " of the output token they want to receive. The function will calculate the required input amount",
          ],
        },
        {
          name: "doc-comment",
          arguments: [
            " by working backwards through the path and ensure it doesn't exceed the maximum input limit.",
          ],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [" # Arguments"],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [
            " * `amount_out` - The exact amount of output tokens to receive",
          ],
        },
        {
          name: "doc-comment",
          arguments: [" * `asset_in` - The starting asset ID for the swap"],
        },
        {
          name: "doc-comment",
          arguments: [" * `asset_out` - The final asset ID for the swap"],
        },
        {
          name: "doc-comment",
          arguments: [
            " * `amount_in_max` - The maximum amount of input tokens willing to spend (slippage protection)",
          ],
        },
        {
          name: "doc-comment",
          arguments: [
            " * `path` - path of pool IDs for the swap (supports multi-hop swaps)",
          ],
        },
        {
          name: "doc-comment",
          arguments: [
            " * `recipient` - The address that will receive the output tokens",
          ],
        },
        {
          name: "doc-comment",
          arguments: [
            " * `deadline` - Unix timestamp after which the transaction will revert",
          ],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [" # Returns"],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [
            " * `Vec<(u64, u64, Asset, Asset)>` - Array of actual input, output and fees for each hop in the swap path",
          ],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [" # Reverts"],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [
            " * When the swap would require more than `amount_in_max` input tokens",
          ],
        },
        {
          name: "doc-comment",
          arguments: [
            " * When the transaction is executed after the `deadline`",
          ],
        },
        {
          name: "doc-comment",
          arguments: [
            " * When insufficient liquidity is available in the pools",
          ],
        },
      ],
    },
  ],
  loggedTypes: [
    {
      logId: "10098701174489624218",
      concreteTypeId:
        "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a",
    },
    {
      logId: "13422313128416634537",
      concreteTypeId:
        "ba45a2ad0355e6a9ab4059f00cf03a1b23352843875b2a1550fbddf2b566a085",
    },
  ],
  messagesTypes: [],
  configurables: [
    {
      name: "POOL_CURVE_STATE",
      concreteTypeId:
        "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      offset: 10776,
      indirect: false,
    },
  ],
  errorCodes: {},
};

const bytecode = decompressBytecode(
  "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"
);

export class SwapExactOut extends __Script<
  SwapExactOutInputs,
  SwapExactOutOutput
> {
  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(wallet: Account) {
    super(bytecode, abi, wallet);
  }
}
