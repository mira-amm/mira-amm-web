/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.101.2
*/

import {
  Account,
  BigNumberish,
  BN,
  decompressBytecode,
  Script as __Script,
  StrSlice,
} from "fuels";

import type {Enum, Vec} from "./common";

export type IdentityInput = Enum<{
  Address: AddressInput;
  ContractId: ContractIdInput;
}>;
export type IdentityOutput = Enum<{
  Address: AddressOutput;
  ContractId: ContractIdOutput;
}>;
export enum PoolCurveStateScriptErrorInput {
  InvalidParameters = "InvalidParameters",
  PoolNotFound = "PoolNotFound",
  ZeroAddress = "ZeroAddress",
  InvalidPool = "InvalidPool",
  InvalidIdSlippage = "InvalidIdSlippage",
  InvalidAsset = "InvalidAsset",
  InsufficientAmountX = "InsufficientAmountX",
  InsufficientAmountY = "InsufficientAmountY",
  InvalidPath = "InvalidPath",
  InvalidAmountIn = "InvalidAmountIn",
  InsufficientOutputAmount = "InsufficientOutputAmount",
}
export enum PoolCurveStateScriptErrorOutput {
  InvalidParameters = "InvalidParameters",
  PoolNotFound = "PoolNotFound",
  ZeroAddress = "ZeroAddress",
  InvalidPool = "InvalidPool",
  InvalidIdSlippage = "InvalidIdSlippage",
  InvalidAsset = "InvalidAsset",
  InsufficientAmountX = "InsufficientAmountX",
  InsufficientAmountY = "InsufficientAmountY",
  InvalidPath = "InvalidPath",
  InvalidAmountIn = "InvalidAmountIn",
  InsufficientOutputAmount = "InsufficientOutputAmount",
}

export type AddressInput = {bits: string};
export type AddressOutput = AddressInput;
export type AssetInput = {id: AssetIdInput; amount: BigNumberish};
export type AssetOutput = {id: AssetIdOutput; amount: BN};
export type AssetIdInput = {bits: string};
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = {bits: string};
export type ContractIdOutput = ContractIdInput;
export type PoolInput = {
  asset_x: AssetIdInput;
  asset_y: AssetIdInput;
  bin_step: BigNumberish;
  base_factor: BigNumberish;
};
export type PoolOutput = {
  asset_x: AssetIdOutput;
  asset_y: AssetIdOutput;
  bin_step: number;
  base_factor: number;
};
export type RemoveLiquidityParametersInput = {
  pool: PoolInput;
  amount_x_min: BigNumberish;
  amount_y_min: BigNumberish;
  lp_assets: Vec<AssetIdInput>;
  to: IdentityInput;
  deadline: BigNumberish;
};
export type RemoveLiquidityParametersOutput = {
  pool: PoolOutput;
  amount_x_min: BN;
  amount_y_min: BN;
  lp_assets: Vec<AssetIdOutput>;
  to: IdentityOutput;
  deadline: BN;
};

export type RemoveLiquidityInputs = [params: RemoveLiquidityParametersInput];
export type RemoveLiquidityOutput = Vec<AssetOutput>;

export type RemoveLiquidityConfigurables = Partial<{
  POOL_CURVE_STATE: ContractIdInput;
}>;

const abi = {
  programType: "script",
  specVersion: "1.1",
  encodingVersion: "1",
  concreteTypes: [
    {
      type: "enum scripts_common::PoolCurveStateScriptError",
      concreteTypeId:
        "ba45a2ad0355e6a9ab4059f00cf03a1b23352843875b2a1550fbddf2b566a085",
      metadataTypeId: 2,
    },
    {
      type: "str",
      concreteTypeId:
        "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a",
    },
    {
      type: "struct RemoveLiquidityParameters",
      concreteTypeId:
        "7c7c8ebcb37118d67e19621ae0385197b92012bec5e4289e73c55f3e3af620f9",
      metadataTypeId: 6,
    },
    {
      type: "struct interfaces::amm::Asset",
      concreteTypeId:
        "8a217b6781f0e24ac50353bfd4242fd0d50d2e6fe04d1a389c1fbf647b7e5a6e",
      metadataTypeId: 7,
    },
    {
      type: "struct std::contract_id::ContractId",
      concreteTypeId:
        "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      metadataTypeId: 11,
    },
    {
      type: "struct std::vec::Vec<struct interfaces::amm::Asset>",
      concreteTypeId:
        "da94b640eca7f3afc552d8ca2859fcad0e90931004beb23aeff68f201cdc53e7",
      metadataTypeId: 13,
      typeArguments: [
        "8a217b6781f0e24ac50353bfd4242fd0d50d2e6fe04d1a389c1fbf647b7e5a6e",
      ],
    },
  ],
  metadataTypes: [
    {
      type: "()",
      metadataTypeId: 0,
    },
    {
      type: "b256",
      metadataTypeId: 1,
    },
    {
      type: "enum scripts_common::PoolCurveStateScriptError",
      metadataTypeId: 2,
      components: [
        {
          name: "InvalidParameters",
          typeId: 0,
        },
        {
          name: "PoolNotFound",
          typeId: 0,
        },
        {
          name: "ZeroAddress",
          typeId: 0,
        },
        {
          name: "InvalidPool",
          typeId: 0,
        },
        {
          name: "InvalidIdSlippage",
          typeId: 0,
        },
        {
          name: "InvalidAsset",
          typeId: 0,
        },
        {
          name: "InsufficientAmountX",
          typeId: 0,
        },
        {
          name: "InsufficientAmountY",
          typeId: 0,
        },
        {
          name: "InvalidPath",
          typeId: 0,
        },
        {
          name: "InvalidAmountIn",
          typeId: 0,
        },
        {
          name: "InsufficientOutputAmount",
          typeId: 0,
        },
      ],
    },
    {
      type: "enum std::identity::Identity",
      metadataTypeId: 3,
      components: [
        {
          name: "Address",
          typeId: 9,
        },
        {
          name: "ContractId",
          typeId: 11,
        },
      ],
    },
    {
      type: "generic T",
      metadataTypeId: 4,
    },
    {
      type: "raw untyped ptr",
      metadataTypeId: 5,
    },
    {
      type: "struct RemoveLiquidityParameters",
      metadataTypeId: 6,
      components: [
        {
          name: "pool",
          typeId: 8,
        },
        {
          name: "amount_x_min",
          typeId: 16,
        },
        {
          name: "amount_y_min",
          typeId: 16,
        },
        {
          name: "lp_assets",
          typeId: 13,
          typeArguments: [
            {
              name: "",
              typeId: 10,
            },
          ],
        },
        {
          name: "to",
          typeId: 3,
        },
        {
          name: "deadline",
          typeId: 16,
        },
      ],
    },
    {
      type: "struct interfaces::amm::Asset",
      metadataTypeId: 7,
      components: [
        {
          name: "id",
          typeId: 10,
        },
        {
          name: "amount",
          typeId: 16,
        },
      ],
    },
    {
      type: "struct interfaces::amm::Pool",
      metadataTypeId: 8,
      components: [
        {
          name: "asset_x",
          typeId: 10,
        },
        {
          name: "asset_y",
          typeId: 10,
        },
        {
          name: "bin_step",
          typeId: 14,
        },
        {
          name: "base_factor",
          typeId: 15,
        },
      ],
    },
    {
      type: "struct std::address::Address",
      metadataTypeId: 9,
      components: [
        {
          name: "bits",
          typeId: 1,
        },
      ],
    },
    {
      type: "struct std::asset_id::AssetId",
      metadataTypeId: 10,
      components: [
        {
          name: "bits",
          typeId: 1,
        },
      ],
    },
    {
      type: "struct std::contract_id::ContractId",
      metadataTypeId: 11,
      components: [
        {
          name: "bits",
          typeId: 1,
        },
      ],
    },
    {
      type: "struct std::vec::RawVec",
      metadataTypeId: 12,
      components: [
        {
          name: "ptr",
          typeId: 5,
        },
        {
          name: "cap",
          typeId: 16,
        },
      ],
      typeParameters: [4],
    },
    {
      type: "struct std::vec::Vec",
      metadataTypeId: 13,
      components: [
        {
          name: "buf",
          typeId: 12,
          typeArguments: [
            {
              name: "",
              typeId: 4,
            },
          ],
        },
        {
          name: "len",
          typeId: 16,
        },
      ],
      typeParameters: [4],
    },
    {
      type: "u16",
      metadataTypeId: 14,
    },
    {
      type: "u32",
      metadataTypeId: 15,
    },
    {
      type: "u64",
      metadataTypeId: 16,
    },
  ],
  functions: [
    {
      name: "main",
      inputs: [
        {
          name: "params",
          concreteTypeId:
            "7c7c8ebcb37118d67e19621ae0385197b92012bec5e4289e73c55f3e3af620f9",
        },
      ],
      output:
        "da94b640eca7f3afc552d8ca2859fcad0e90931004beb23aeff68f201cdc53e7",
      attributes: [
        {
          name: "doc-comment",
          arguments: [
            " Removes liquidity from a pool according to the specified parameters",
          ],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [
            " This function removes liquidity from the specified bins in the pool and returns",
          ],
        },
        {
          name: "doc-comment",
          arguments: [" the underlying tokens to a specified user."],
        },
        {
          name: "doc-comment",
          arguments: [" # Arguments"],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [
            " * `params` - The parameters defining how to remove liquidity",
          ],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [" # Returns"],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [
            " * `(u64, u64)` - Tuple containing the amounts of token X and Y received",
          ],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [" # Reverts"],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [" * When the transaction is executed after the deadline"],
        },
        {
          name: "doc-comment",
          arguments: [
            " * When slippage exceeds the minimum amount requirements",
          ],
        },
        {
          name: "doc-comment",
          arguments: [" * When insufficient LP tokens are provided"],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [" # Additional notes"],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [" * It requires proof-of-ownership of the LP tokens."],
        },
      ],
    },
  ],
  loggedTypes: [
    {
      logId: "10098701174489624218",
      concreteTypeId:
        "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a",
    },
    {
      logId: "13422313128416634537",
      concreteTypeId:
        "ba45a2ad0355e6a9ab4059f00cf03a1b23352843875b2a1550fbddf2b566a085",
    },
  ],
  messagesTypes: [],
  configurables: [
    {
      name: "POOL_CURVE_STATE",
      concreteTypeId:
        "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      offset: 11816,
      indirect: false,
    },
  ],
  errorCodes: {},
};

const bytecode = decompressBytecode(
  "H4sIAAAAAAAAA4VafWwcx3WfIynyJCvWUscvrSxp9UH5WtfKyvowrTj2Xo6nu8uJ5dAUS7LS4paVBFOAHJ/PosAgQX1t7VYJ3OJi1DbtuOnFrRO5SdulSEmULNsH1E0FJGgvRdrojxag06SlEB1MBDFKNyiU35uZvV0emZgAMbPv5s28efM+542+aLKzjDUx8Xd/TrZ7ovadcki7c4d9hTEjv8DmtJ/+fZn/mBl83mKvLJk/1m9z/LZmkZ+YWRiz2LpslX2bD19yePzief0WZ/pPGI37GT/mOs6xCrdjnNk2Y9Tme1lYizVZ2SH5bZ/6FfDTK+F5ixmbY82F3RZjOsf/GfxPlJiey7GO2OHCOYv9qcCNATcB3BRwE22F7JDGIgnGzvUyLRJjFsaFDmKnoNfJ3taO8ORMl6RbI7o/4EnXcpIVg6dZ2ElrBk9e6nESLAperQdOT/Y2S/LkxaUAzo+AY6yGU6MnDXqOgJ70rnJ2yGA8M1100g7PVnMPZ6vFT2er5Uey1cqj2apr8T5j0unTouDrYR53F5yYcYHHZ5ZEm5zp0W9h32Ldva324xVmxyshO1lp4JkZrt8yAO9Za2cA7wd8EPDh2bls1Xg5WzWnslXrFYyb1G9pmAP0v0/jH9qAccwexvhjlQb9OGMd6bPWuRS7m2dmS8D582yVv5itOi/x/plxWkP/iUnrNPOMe9PJVDRnzNDsdCFkjxVY9xjt75KBff019vBGtqp9A3hliZfDmoR76FvAdYEb5f2Xzjt9RhRrLfB+wNKmAVgY634d676Odf+KD85c8NbV3yc5PPRMcI/2sKvzY7MV7PNV7POrwH0N+yzKM3LUPnv+LbhPzc5ZE4w9hDO9GZDbJ50PcI7xS+NO3KW2Qm0kdkXIDWSgMxKrML1XY/hugEw2bE60WO2xTktPlwlGY9ZLWW2yhKxaOdbeB5xUjp07In5vgmwam9M/KERj7xX0NMkxzuMpw5PxshZ7j0GGKuAj+CHkySWcaKytoD3hWtqARbRff5GxDS+FgS90ko3rmQLT++dZ9oNSGLJjkVz68mL2yL25Kbk3NwX9MqLpJkv/OWMvEP5HJpvCfC9j3lca5xnmfyYwf0WPQ9+SRaZn5hnOqijlwNwh5sXZybUEbAu+Dae/ItbH914dvFf9PfmjLLx1IGHlj96504p2y0C/pX47oMcrjA9DB4dB4yg3nFETsmRpkKVWJ8G5/qFGtFb0jwyP1mcUrdsCtDpBWu3+EnOqJFeYF3TZfbAnnBla3wGWjZmwBaCV/hPMUPM7gfm3qflbvPn1OOZMltjxhMbsTIlpacPKknwCV/+IeXgt9XRJmubZ6KJ55JVflEGb5Am+j4vv/tr3GfGteIbvL9I35KNra2wX1lxkrbGmAmRC25reX7D78Q3bskXCwlvTvctgW2IbLP1D0PCRVrenR+/4PNut6YPgF+Qnb225qcVnmRMvXbDjM/9yXy9jcey1HbICuxCKoLXji5oWY2XYpAL4pvH41UK22mpCpu5Gu5cnr04RPG91XxBzxTTYXwM60vw0cFsJN9+LdZKzFk9oTj617YKWmS1A3rvs5Mz/tmM9slWwt0/mj7YVteFLljNkhD3b9crSg6EA/iTPXF7A2P+EvYs6Q/BXMSPsxLiRt7YX1PpR7Csl+wb6Eo45UjQH1i/L9RmNy/k4gMtxObEWbBuNwfxR+p3H33IxH7fj0+fgXzwb0IDvL6jvneo3z4Z4v1k6+Kpgm2geHmPhfO89Bq1DsqhgWEvALQ+etzBG0CRh+VQrV7Tjt1aPduge2UzSqwf/QU9WyN8H1uksrL5OZ8lfB2PEOhKGdbTAOuYq67xJ60RiOLvk1SJksSFb3f5APtW2oM4W50c2guzxwa94chY4RyOfQh9j+ZCB9VR/1EjlU5ssf+1N3plS35JzbLzg7+cd5eMETS9CvzUnXjHyvZscf29yDuDdCOBNBfD+BHimwgvwBHMIPAnLp3aM+3RtmfLpAlzubUqO6zT8cZ2CZhr39diuHZAB+AyPHuxHyNmVSRoLOTPkfO2akl0L53iXv2/gSbms/Krx9onFjdpYoWxnFyPwe9C7Dm8/Vt5CX8zTMR+AzUtYV4+/bwmDjIAfXTXZyVsYI8cqOq7OBelAa0EPw2hTTswJ562I2rvBefIdxFGef3rwII9Pj0h+bw3wG30xv1HTi7yFvtx7OXAuSk+3Lfgw9Inm5MURNVdNbrhl0dnXxuLs5wJnD/95cZ5o4clrppMohHnm2jjsWh/FpGh/G/DzTsLQ8inMSTI6fK0E+wT53VwKyEPUs304c2lThU3qEntyYrnamHyvJuRE2tJ3A/J7oBfxH2xxRcv3bvbOqDYfbEBN7mEXhK3FXGGC0RzAfw42WkN82gVZPe/TpgsegrYuyOp5iQeYkFUjoGu6OF85TvYxXxTrdYGuIsHtuJu3s+7TdtI96+Hy4Rmy1+AH/Gy6rdA+2l0+NyJsXUt+BHHT6EQhfxy/2afKuxFzRrcgDkGsxI9d6XHg97VEE/bkEP/B71AsW33qM7Alcazp0JqAU4xNNLkB+kQfcuGdK2DoC1ir68M0sY8Ajweh61zyeNukz2OcpcCVfIePmFJ2jMYpvd6pzptg6AsdQO6Db56cLZOMgC9TwJ2kcfmjRkn5MsgO+gK20/Vh6Av+uTn6RlwMveaanXFf5cOXNfJtiKm/g1j3n6BLRSVTJk++izympkvt2E9B7mfLnL8f9MV+dgifJ2HoC9hOT5cAQ1+cs1uU8jg7TzKMc34Neq72eAV6TrHplTnEI+vut5oew7hU9nblS+C/J6fQd/QxF3z6w7aIl2YepvhPS3db2erOhyNpxNIptimS0CzkaDI3S165idzsFzzz9rznL0YXDz1PMRB4W0LegFyH4qKHZNwkYsaZC+AXcir2DI9p5PtH8ql25Rc1B3K3BvF8DjHC3/lw5sAmiL3CHtX64I+nU4ChL3hxndM3fPeXpe8WOUCIfDiPX6tkb7f+LvzcoppXxSnk5/b/0J93p9BLOS/6Yt63SZdo3jeW56dvK3+8y6NlJG+hL22cZwsBQz/gQ+GjiwEffWOljz5QFvxKXpuHbjZCp46D7qWV/nn/m97c0uYHfXSr8ue0xkaxj7o1vqnWWFJrZMFztsoaRS8GwBoO+DPu6yj6gj+XxTfO7buIU3CukDm0HDA7M33SHp4+AdtikW2JyLbThkyJmDxBuegccvbWFpI9AzKWPxpZlLpG9utd5NMyj9ffJ7oPvge9WRR2P4H4kWxqb7uyGwbdAUCGLuPegH3PhyNuir8F3yZiQeRURsWDw09VlOzADuA+ID49FYz7hAz1higmA972Lh8PfSkb8DECb7pONs5L2ehmvu1HX8qBJ2Pg0xUNevQj3msx727C+z2f2qXOg9brUjpAcQPgkmam1i6oOHaH6hMdiGEX7zqI/JbHr9PZUXwaoAV9GRMIm4K1UoHYTfymYjc1Dr9Lv+PJIehEX+Iqn6UZD6faGPLe3/fX7AzEc+gvXzPqr9klbBCtiTO29WPIq47iniM2RPdGtJf1tBf89jsdsawFH39HxeWhscSgiGfxnUJLe3+I8v5IrI1g4B1rVP1O9JtUvxm8H4Gc/BRxlaerGuZbB1uBPKXV5sm36I6qCbrhqLPBfvyx+VSH6fkVhVcG3gh06qbSqWM1vNpY4PV2qDzB8PCQQ7X2Aw8+SMTjg4H1vJyC1vNsJeGtBZ4BvF7gQd5bjwTW8mwnraX4L9YCzuXzkLfv8+QccELrA+t45wRfch13WuRLpv8ikBM14vtr4Dt4iRxTwuKwIz/7NedxX+ActgbOAby/xrH+Z0FrzqMVuK24rwzhLpD8TDPmBK5Yq2EsxtdTXka6NRYbWIvc5QL2fAB3d2sQexz05yEf36FiX7FnrDU3jrGfwHp3+78Jfio7LPjZAt9IuviHoB9noP2R/7vgCeWQxJOX6vLEl5XuNWhDnO58vgX9VPHizkAMjr6UfRWn7KrlJJ9O84EJFspAxtso57aTi+1aQivzFOLfoxFDxR0Gz7yj7sGEXU7hjlKDnzX48JVx2ErQOHcjWx3YBN+N/H5A58NzNwm+zH6PoH/sEvI1Z5Jn5xYcGzY2lutC3A/beBX5cs7Kj2wu0xhnlGLDLT2STg5+dSrdp/xjkxebUnys8gvN84MUHyNv8GK3B76IvIHyNIqPFwPx8ZKKj738DvOiL+cSeibj4wfe5slpuvNFfLzdi3sxVvdyOfgiwGV8rGI+wwmME35KjgNcjhN+DOPCahzFptwbZx+bbfS+QYtHH8WlIzIuxZ1lzSft+yb2N4n9dWFeYRNprG+/Qv+HudRedS/uqtGCcyE8JRfb1R0L2S3dy4Vof16MQ7EI2fznlNztU/16m69ik26P35QnKBnUajQip3L0BTqn2l7OYi9Lci+bR3xaMY+MswUM8YiKs2neNhGzypj/XeRoMsbQ36ez2///yNMot6f5xP2MnA99MV+7iFkIBn3aE6D7/Cp0B3inCXx9QcbTivYEaL+h1tICtKvcScJA+0iA9skA7aU62v8Z81GOSfN5dphoV7Lm0w6YWEOelewDJxr4XdkEPSBL6EuY55cJpvxtxIsRaK8i/g/oE/TrYlTlQh6fKBdSMazUMeSSap9kE9GXuVAlkAuJOIhnLvaoXGhR5UJfQy4kfDpyoUDeg77MheYDudC8zIUupmQudImpXKiEXGhK5UI/RC50E7mQimFELhT1c6F9/4r9kP5QLuTxh+yW4o8RyHvQl7Y1YEfQl3cIFIuBN5c0lQu9jjxH2BHEmLiroVxobjKQC8F/Vp4F/724Lpx30D9xGTWbmbiofaGt1biqjXH4sCju/0XdAPgsezuHO9XiH4B3k7Q24gncmXXX8nYdQt0R+3fSTcTqEo6YyNsPzhZ9AdvuxaSk6yomvXxDxdX/gfiT7jINqv3oDq39VlTF1+OIrx//mPh6Cv4v4sfXbZVAfF1ZHl/vvx9nMYezwPwivo5CzhWvDVPG17NF0PSCD2cm6MmBPtFiL15ub2Iv6n7n+hJ9w1b95cr4muHOgPB2eOcAPPRlfO0qvMt18bW6I+327r9gL9GXPtazWxQ3C3vt514bAzHnRnXXHMyLHhg793N2Tz2ezKk2Bu4RN3r6HsR9DLiI566OQ2YQl7TeDx55ehz2bBXqgp+SscPMBm3sWbrzlX37LMXOE+j/Y3viLPEFsdBZ7PVqDnFhM+LCPfmUNrcyf917L3C+0554VuE8SziTwGkBzieB492bB3F0T/acAfiqDy2i43n4A1O/hRoV9pNf3DRrLD7KRE4fvzhFOZedKKB2izuCdAGxibojEPXEWU58ga7/GXy48lt0h+/JPGCC/903lP0h+YWdmP0GH2Jh+Ns3IunuAtUuQMdmqsdG0uDriLh7aBT1WXEndbJgox5n25y1nz5V1p9AvWJc1fTGoZun3yjsHgefx1HTewq1zDM5di6nanpn8Lt9rhw93Q28EupKLssOOar+q9F+opvTRwvQddRoJJ35o92OsnVRwERMQeOisW7LRoyLeA06xpg2UaHY7yPYJ5Fr53vbavYbOjbi13OFn4rArxTlPeo9gfwIfekPVF7VFriPbvPuo8lPoY4f9FP7dmE+tz7+kPFowzavvgNdCdwzoS99as1/4OxxZ+P5GHMDaoaAvVVC3Q22dPETdnL6LOzNxP5Q02P4vpvijBeoJlWrST56R9XTAjWrUE6Po2aFmhriVe5kSvAR0xx1PtwbiTrkYazTxfunHdSY6bceJ+N2UYsxXYCh78J2m7B17gbcYWp2v9vKB6cdUYMcsjS8YzCdUbSDuAsbcDR70I1AVsLaQKKgjR5g7aOnvHvNZu9eE3eaTN5p7ipT3Re4JWeAa9rArrJ9zG3PDjiMD1hh1K3bogNDBd5nhlGLLGCcC1/WgXcBnahjE22Qewv0uzckrdOoPRF8GrXM6bCiH7Ew6uJC78zt+B4XNXnkE1Tze4F45Nf9PB4G68Ypry6ZTzWx3SnYP/AIvqcxf6SJgY4m2OM1TlWsZRL/MDd0WtSMU4G5vZpxsA477p8P9pIpyT3JuaI0F/i9hqdxNoMufKAZ5n0W7Qv37VgnbQX2QfXp+vplcK0GyALVZYssgpos9LqB6to4l+9TfVfVUZfI3uDNBO4h8Q6gv9IQGYAN4Oxv0Fpov4q6MGDtBPsy+o2q/3n0m1R/HP01qj+MfrPqH0a/RfUPoB9W/V3or1X9CPrrIgn0kX/W4unkNN5msH04+/3gwQHQS/Z1ndRDz3eabwi6k6A7U2nAvj5BdQ3gZYB3BHh9wEMdla2tw3t5FTzwmqWAlwbeZ6HfPVQ3rsP70ip49C4lAbzDwEsCj+73W+rwvrAKHtXvcX9vxIGHesY07hFYcx3eEyvxppeAh3cxiDWqZozu5oC3pg4vuwrePPDwtsbA2xrzEeDRnUlTHd7AKnjIcdlDwDsEvE8Br0x3LXV48VXwoLfsIPAeBF4P8C7QXUsd3oE6vPXAQ3zHTODtBd4DwCsuz5dM5GIrcFCHYvcDZw9wPknvOJbnKebmIA7sBN2J/yZ8533A+S2Mx50n2QvSh33fJn2QtphqpMIWb0CM3gB72LjcFkO//LcNnv4FbDErSjsC/y7fh0w6/UWyXZN4e0GtibcXpO/NsLMtsKNh4eOHElb76NBqtaGwXxs6wPQjOaYN4L3GAMVnLmTXXAs7ifdn/C5py8kXou4SM7tEfizfcRQD7zg821d7xwGarYB9MmCfDKdK96Yu6rJ3zyu7YwXsjvemo9F/0yHxnf8p4e3IsjcWjSvf0ITCy9+lLHZofWYZNoHvxps22Nw26uO9Sztsbgf5DemH8C5FxNHiDd6DiGkM8b4OdTJ5VyDgewG3AF8CPAy8JfCyWRsagozxTvAa9068C/A5p8o1tAW8sdH0W5Z6T2EeQsyb4sPTDOuh/jlNMUuTFltDtmIT3W2i1cGbG8ClOhTJDOp/XM0hZO83kBe14Ww7MAb3Q+LNzc3P9K2Rb2xiZuCNDXix8g1P8Gx44Gzgd0q4o3JJV8T7KbRrxJlVya+DHvz7dQWzRb1p4ivPriUos27dmyYOmdXQ5vAGj3LVDZE++Icj7BDvQzw5gHu4gV7LHmINfBRxpc1CHfYEO3dcyO694p3jqMPaxxIF/RRiQ0fAw3S2uoOY8TTO6iTgMqZsiI5NYFwBPrYI3lprcHbYj0Mxh+bgX76hFG2BWsQOrbtHMNdxzDXmePO38BOuwx8Hj04VNLRFau0T7sao/VwhG8shFnVCFIfSWeJcOOazICM0b4laEYfEjlrZPpyj5Jvrn03LanGXestU4xt4b8Ke9IwI/4p3THhrF8JbuwasccMZhbxm3QXo7BbscyvkcBtw8JaQZNd7E2juDeLZo6wJOPCLZgQ4bcBpBw5sl48zuri/UL8e3dliTdhjE3GUhTgKMo9zlbJBbwEF3lwtDqi9k3TJFsNPma3A2wh5xR2CfBeIff3As5NOEnuV8gtdX2FbgrK1KOW3Zg8rTj9kuB/6J20V9FC0qDvDLsbddbCLd8E+rofeV0BPF+JPQ7xTg91rH018XP28LOvniP+oft7XVHb6UD/vd8/T2znYyo3YF3IDt4dsJOAlosNJmJ6tXFxlP8E40dDj2Av0kd684T2rsbnvEYvetEIHxfs5ZS+NVWLCZW/nxiiPTCPeQgxAfjKCd7oUDwHeXLuH7w01fdx7Ot9G1HjcJXg8iD1S3in8HGT6v1yc4d7X6s+ccqtswgxlE1aD4gHsxYp3f0EeROt4EA3wAHdmkBnJg2g9D+jvDv56T42dPHP6c6f42NNPnzopX13/ur/HT53N5p588szvTeQ/lz1z+qmJ0ydPn/28nIv+vif+WIP8YqHnu7978I8P73lVfbNridf/tnHov9+Us927X7WgjP52zqm2KNvO66p9XrbNH0vfLwHlroSzSC4AAA=="
);

export class RemoveLiquidity extends __Script<
  RemoveLiquidityInputs,
  RemoveLiquidityOutput
> {
  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(wallet: Account) {
    super(bytecode, abi, wallet);
  }
}
