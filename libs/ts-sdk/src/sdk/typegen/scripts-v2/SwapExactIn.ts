/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.101.2
*/

import {
  Account,
  BigNumberish,
  BN,
  decompressBytecode,
  Script as __Script,
  StrSlice,
} from "fuels";

import type {Enum, Vec} from "./common";

export type IdentityInput = Enum<{
  Address: AddressInput;
  ContractId: ContractIdInput;
}>;
export type IdentityOutput = Enum<{
  Address: AddressOutput;
  ContractId: ContractIdOutput;
}>;
export enum PoolCurveStateScriptErrorInput {
  InvalidParameters = "InvalidParameters",
  PoolNotFound = "PoolNotFound",
  ZeroAddress = "ZeroAddress",
  InvalidPool = "InvalidPool",
  InvalidIdSlippage = "InvalidIdSlippage",
  InvalidAsset = "InvalidAsset",
  InsufficientAmountX = "InsufficientAmountX",
  InsufficientAmountY = "InsufficientAmountY",
  InvalidPath = "InvalidPath",
  InvalidAmountIn = "InvalidAmountIn",
  InsufficientOutputAmount = "InsufficientOutputAmount",
}
export enum PoolCurveStateScriptErrorOutput {
  InvalidParameters = "InvalidParameters",
  PoolNotFound = "PoolNotFound",
  ZeroAddress = "ZeroAddress",
  InvalidPool = "InvalidPool",
  InvalidIdSlippage = "InvalidIdSlippage",
  InvalidAsset = "InvalidAsset",
  InsufficientAmountX = "InsufficientAmountX",
  InsufficientAmountY = "InsufficientAmountY",
  InvalidPath = "InvalidPath",
  InvalidAmountIn = "InvalidAmountIn",
  InsufficientOutputAmount = "InsufficientOutputAmount",
}

export type AddressInput = {bits: string};
export type AddressOutput = AddressInput;
export type AssetInput = {id: AssetIdInput; amount: BigNumberish};
export type AssetOutput = {id: AssetIdOutput; amount: BN};
export type AssetIdInput = {bits: string};
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = {bits: string};
export type ContractIdOutput = ContractIdInput;

export type SwapExactInInputs = [
  amount_in: BigNumberish,
  amount_out_min: BigNumberish,
  asset_in: AssetIdInput,
  path: Vec<BigNumberish>,
  recipient: IdentityInput,
  deadline: BigNumberish,
];
export type SwapExactInOutput = Vec<[BN, BN, AssetOutput, AssetOutput]>;

export type SwapExactInConfigurables = Partial<{
  POOL_CURVE_STATE: ContractIdInput;
}>;

const abi = {
  programType: "script",
  specVersion: "1.1",
  encodingVersion: "1",
  concreteTypes: [
    {
      type: "(u64, u64, struct interfaces::amm::Asset, struct interfaces::amm::Asset)",
      concreteTypeId:
        "2a4549dd9a03d84d837cb77cdd967790ab13258e2ad2a208438af998897fdb0a",
      metadataTypeId: 1,
    },
    {
      type: "enum scripts_common::PoolCurveStateScriptError",
      concreteTypeId:
        "ba45a2ad0355e6a9ab4059f00cf03a1b23352843875b2a1550fbddf2b566a085",
      metadataTypeId: 3,
    },
    {
      type: "enum std::identity::Identity",
      concreteTypeId:
        "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
      metadataTypeId: 4,
    },
    {
      type: "str",
      concreteTypeId:
        "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a",
    },
    {
      type: "struct std::asset_id::AssetId",
      concreteTypeId:
        "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
      metadataTypeId: 9,
    },
    {
      type: "struct std::contract_id::ContractId",
      concreteTypeId:
        "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      metadataTypeId: 10,
    },
    {
      type: "struct std::vec::Vec<(u64, u64, struct interfaces::amm::Asset, struct interfaces::amm::Asset)>",
      concreteTypeId:
        "beef34786f22697706987701bc9c347ca8d37cbc26941dc281104437fe41e621",
      metadataTypeId: 12,
      typeArguments: [
        "2a4549dd9a03d84d837cb77cdd967790ab13258e2ad2a208438af998897fdb0a",
      ],
    },
    {
      type: "struct std::vec::Vec<u256>",
      concreteTypeId:
        "742d7b76206a39cfad7eaec9b457390bbd0a92fe1da596db414daa0e4964bf82",
      metadataTypeId: 12,
      typeArguments: [
        "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e",
      ],
    },
    {
      type: "u256",
      concreteTypeId:
        "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e",
    },
    {
      type: "u64",
      concreteTypeId:
        "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
    },
  ],
  metadataTypes: [
    {
      type: "()",
      metadataTypeId: 0,
    },
    {
      type: "(_, _, _, _)",
      metadataTypeId: 1,
      components: [
        {
          name: "__tuple_element",
          typeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
        {
          name: "__tuple_element",
          typeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
        {
          name: "__tuple_element",
          typeId: 7,
        },
        {
          name: "__tuple_element",
          typeId: 7,
        },
      ],
    },
    {
      type: "b256",
      metadataTypeId: 2,
    },
    {
      type: "enum scripts_common::PoolCurveStateScriptError",
      metadataTypeId: 3,
      components: [
        {
          name: "InvalidParameters",
          typeId: 0,
        },
        {
          name: "PoolNotFound",
          typeId: 0,
        },
        {
          name: "ZeroAddress",
          typeId: 0,
        },
        {
          name: "InvalidPool",
          typeId: 0,
        },
        {
          name: "InvalidIdSlippage",
          typeId: 0,
        },
        {
          name: "InvalidAsset",
          typeId: 0,
        },
        {
          name: "InsufficientAmountX",
          typeId: 0,
        },
        {
          name: "InsufficientAmountY",
          typeId: 0,
        },
        {
          name: "InvalidPath",
          typeId: 0,
        },
        {
          name: "InvalidAmountIn",
          typeId: 0,
        },
        {
          name: "InsufficientOutputAmount",
          typeId: 0,
        },
      ],
    },
    {
      type: "enum std::identity::Identity",
      metadataTypeId: 4,
      components: [
        {
          name: "Address",
          typeId: 8,
        },
        {
          name: "ContractId",
          typeId: 10,
        },
      ],
    },
    {
      type: "generic T",
      metadataTypeId: 5,
    },
    {
      type: "raw untyped ptr",
      metadataTypeId: 6,
    },
    {
      type: "struct interfaces::amm::Asset",
      metadataTypeId: 7,
      components: [
        {
          name: "id",
          typeId: 9,
        },
        {
          name: "amount",
          typeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
      ],
    },
    {
      type: "struct std::address::Address",
      metadataTypeId: 8,
      components: [
        {
          name: "bits",
          typeId: 2,
        },
      ],
    },
    {
      type: "struct std::asset_id::AssetId",
      metadataTypeId: 9,
      components: [
        {
          name: "bits",
          typeId: 2,
        },
      ],
    },
    {
      type: "struct std::contract_id::ContractId",
      metadataTypeId: 10,
      components: [
        {
          name: "bits",
          typeId: 2,
        },
      ],
    },
    {
      type: "struct std::vec::RawVec",
      metadataTypeId: 11,
      components: [
        {
          name: "ptr",
          typeId: 6,
        },
        {
          name: "cap",
          typeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
      ],
      typeParameters: [5],
    },
    {
      type: "struct std::vec::Vec",
      metadataTypeId: 12,
      components: [
        {
          name: "buf",
          typeId: 11,
          typeArguments: [
            {
              name: "",
              typeId: 5,
            },
          ],
        },
        {
          name: "len",
          typeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
      ],
      typeParameters: [5],
    },
  ],
  functions: [
    {
      name: "main",
      inputs: [
        {
          name: "amount_in",
          concreteTypeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
        {
          name: "amount_out_min",
          concreteTypeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
        {
          name: "asset_in",
          concreteTypeId:
            "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
        },
        {
          name: "path",
          concreteTypeId:
            "742d7b76206a39cfad7eaec9b457390bbd0a92fe1da596db414daa0e4964bf82",
        },
        {
          name: "recipient",
          concreteTypeId:
            "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
        },
        {
          name: "deadline",
          concreteTypeId:
            "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
      ],
      output:
        "beef34786f22697706987701bc9c347ca8d37cbc26941dc281104437fe41e621",
      attributes: [
        {
          name: "doc-comment",
          arguments: [" Executes a swap with exact input amount"],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [
            " This function performs a multi-hop swap operation where the user specifies exactly how much",
          ],
        },
        {
          name: "doc-comment",
          arguments: [
            " of the input token they want to swap. The function will calculate the output amount",
          ],
        },
        {
          name: "doc-comment",
          arguments: [
            " based on the current pool state and ensure it meets the minimum output requirement.",
          ],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [" # Arguments"],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [
            " * `amount_in` - The exact amount of input tokens to swap",
          ],
        },
        {
          name: "doc-comment",
          arguments: [
            " * `amount_out_min` - The minimum amount of output tokens to receive (slippage protection)",
          ],
        },
        {
          name: "doc-comment",
          arguments: [" * `asset_in` - The starting asset ID for the swap"],
        },
        {
          name: "doc-comment",
          arguments: [
            " * `path` - path of pool IDs for the swap (supports multi-hop swaps)",
          ],
        },
        {
          name: "doc-comment",
          arguments: [
            " * `recipient` - The address that will receive the output tokens",
          ],
        },
        {
          name: "doc-comment",
          arguments: [
            " * `deadline` - Unix timestamp after which the transaction will revert",
          ],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [" # Returns"],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [
            " * `Vec<(u64, u64, Asset, Asset)>` - Array of actual input, output and fees for each hop in the swap path",
          ],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [" # Reverts"],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [
            " * When the swap would result in less than `amount_out_min` tokens",
          ],
        },
        {
          name: "doc-comment",
          arguments: [
            " * When the transaction is executed after the `deadline`",
          ],
        },
        {
          name: "doc-comment",
          arguments: [
            " * When insufficient liquidity is available in the pools",
          ],
        },
      ],
    },
  ],
  loggedTypes: [
    {
      logId: "10098701174489624218",
      concreteTypeId:
        "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a",
    },
    {
      logId: "13422313128416634537",
      concreteTypeId:
        "ba45a2ad0355e6a9ab4059f00cf03a1b23352843875b2a1550fbddf2b566a085",
    },
  ],
  messagesTypes: [],
  configurables: [
    {
      name: "POOL_CURVE_STATE",
      concreteTypeId:
        "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      offset: 10528,
      indirect: false,
    },
  ],
  errorCodes: {},
};

const bytecode = decompressBytecode(
  "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"
);

export class SwapExactIn extends __Script<
  SwapExactInInputs,
  SwapExactInOutput
> {
  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(wallet: Account) {
    super(bytecode, abi, wallet);
  }
}
