/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.101.2
*/

import {
  Account,
  BigNumberish,
  BN,
  decompressBytecode,
  Script as __Script,
  StrSlice,
} from "fuels";

import type {Enum, Vec} from "./common";

export type BinIdDeltaInput = Enum<{
  Negative: BigNumberish;
  Positive: BigNumberish;
}>;
export type BinIdDeltaOutput = Enum<{Negative: number; Positive: number}>;
export type IdentityInput = Enum<{
  Address: AddressInput;
  ContractId: ContractIdInput;
}>;
export type IdentityOutput = Enum<{
  Address: AddressOutput;
  ContractId: ContractIdOutput;
}>;
export enum PoolCurveStateScriptErrorInput {
  InvalidParameters = "InvalidParameters",
  PoolNotFound = "PoolNotFound",
  ZeroAddress = "ZeroAddress",
  InvalidPool = "InvalidPool",
  InvalidIdSlippage = "InvalidIdSlippage",
  InvalidAsset = "InvalidAsset",
  InsufficientAmountX = "InsufficientAmountX",
  InsufficientAmountY = "InsufficientAmountY",
  InvalidPath = "InvalidPath",
  InvalidAmountIn = "InvalidAmountIn",
  InsufficientOutputAmount = "InsufficientOutputAmount",
}
export enum PoolCurveStateScriptErrorOutput {
  InvalidParameters = "InvalidParameters",
  PoolNotFound = "PoolNotFound",
  ZeroAddress = "ZeroAddress",
  InvalidPool = "InvalidPool",
  InvalidIdSlippage = "InvalidIdSlippage",
  InvalidAsset = "InvalidAsset",
  InsufficientAmountX = "InsufficientAmountX",
  InsufficientAmountY = "InsufficientAmountY",
  InvalidPath = "InvalidPath",
  InvalidAmountIn = "InvalidAmountIn",
  InsufficientOutputAmount = "InsufficientOutputAmount",
}

export type AddLiquidityParametersInput = {
  pool: PoolInput;
  amount_x: BigNumberish;
  amount_y: BigNumberish;
  amount_x_min: BigNumberish;
  amount_y_min: BigNumberish;
  active_id_desired: BigNumberish;
  id_slippage: BigNumberish;
  delta_ids: Vec<BinIdDeltaInput>;
  distribution_x: Vec<BigNumberish>;
  distribution_y: Vec<BigNumberish>;
  to: IdentityInput;
  refund_to: IdentityInput;
  deadline: BigNumberish;
};
export type AddLiquidityParametersOutput = {
  pool: PoolOutput;
  amount_x: BN;
  amount_y: BN;
  amount_x_min: BN;
  amount_y_min: BN;
  active_id_desired: number;
  id_slippage: number;
  delta_ids: Vec<BinIdDeltaOutput>;
  distribution_x: Vec<number>;
  distribution_y: Vec<number>;
  to: IdentityOutput;
  refund_to: IdentityOutput;
  deadline: BN;
};
export type AddLiquidityResultInput = {
  amount_x_added: BigNumberish;
  amount_y_added: BigNumberish;
  amount_x_refunded: BigNumberish;
  amount_y_refunded: BigNumberish;
  deposit_bin_ids: Vec<BigNumberish>;
  lp_token_minted: AssetIdInput;
};
export type AddLiquidityResultOutput = {
  amount_x_added: BN;
  amount_y_added: BN;
  amount_x_refunded: BN;
  amount_y_refunded: BN;
  deposit_bin_ids: Vec<number>;
  lp_token_minted: AssetIdOutput;
};
export type AddressInput = {bits: string};
export type AddressOutput = AddressInput;
export type AssetIdInput = {bits: string};
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = {bits: string};
export type ContractIdOutput = ContractIdInput;
export type PoolInput = {
  asset_x: AssetIdInput;
  asset_y: AssetIdInput;
  bin_step: BigNumberish;
  base_factor: BigNumberish;
};
export type PoolOutput = {
  asset_x: AssetIdOutput;
  asset_y: AssetIdOutput;
  bin_step: number;
  base_factor: number;
};

export type AddLiquidityInputs = [params: AddLiquidityParametersInput];
export type AddLiquidityOutput = AddLiquidityResultOutput;

export type AddLiquidityConfigurables = Partial<{
  POOL_CURVE_STATE: ContractIdInput;
}>;

const abi = {
  programType: "script",
  specVersion: "1.1",
  encodingVersion: "1",
  concreteTypes: [
    {
      type: "enum scripts_common::PoolCurveStateScriptError",
      concreteTypeId:
        "ba45a2ad0355e6a9ab4059f00cf03a1b23352843875b2a1550fbddf2b566a085",
      metadataTypeId: 3,
    },
    {
      type: "str",
      concreteTypeId:
        "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a",
    },
    {
      type: "struct AddLiquidityParameters",
      concreteTypeId:
        "d02ca4c5f77f360866d5afc1b1b857fb099ed9d7b17778929cf4ebebd22f53ba",
      metadataTypeId: 7,
    },
    {
      type: "struct AddLiquidityResult",
      concreteTypeId:
        "7ebc691269f2134aec7a39e57821beec4db67e5ba6832cd78a4aab8bee73f5c1",
      metadataTypeId: 8,
    },
    {
      type: "struct std::contract_id::ContractId",
      concreteTypeId:
        "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      metadataTypeId: 12,
    },
  ],
  metadataTypes: [
    {
      type: "()",
      metadataTypeId: 0,
    },
    {
      type: "b256",
      metadataTypeId: 1,
    },
    {
      type: "enum BinIdDelta",
      metadataTypeId: 2,
      components: [
        {
          name: "Negative",
          typeId: 16,
        },
        {
          name: "Positive",
          typeId: 16,
        },
      ],
    },
    {
      type: "enum scripts_common::PoolCurveStateScriptError",
      metadataTypeId: 3,
      components: [
        {
          name: "InvalidParameters",
          typeId: 0,
        },
        {
          name: "PoolNotFound",
          typeId: 0,
        },
        {
          name: "ZeroAddress",
          typeId: 0,
        },
        {
          name: "InvalidPool",
          typeId: 0,
        },
        {
          name: "InvalidIdSlippage",
          typeId: 0,
        },
        {
          name: "InvalidAsset",
          typeId: 0,
        },
        {
          name: "InsufficientAmountX",
          typeId: 0,
        },
        {
          name: "InsufficientAmountY",
          typeId: 0,
        },
        {
          name: "InvalidPath",
          typeId: 0,
        },
        {
          name: "InvalidAmountIn",
          typeId: 0,
        },
        {
          name: "InsufficientOutputAmount",
          typeId: 0,
        },
      ],
    },
    {
      type: "enum std::identity::Identity",
      metadataTypeId: 4,
      components: [
        {
          name: "Address",
          typeId: 10,
        },
        {
          name: "ContractId",
          typeId: 12,
        },
      ],
    },
    {
      type: "generic T",
      metadataTypeId: 5,
    },
    {
      type: "raw untyped ptr",
      metadataTypeId: 6,
    },
    {
      type: "struct AddLiquidityParameters",
      metadataTypeId: 7,
      components: [
        {
          name: "pool",
          typeId: 9,
        },
        {
          name: "amount_x",
          typeId: 17,
        },
        {
          name: "amount_y",
          typeId: 17,
        },
        {
          name: "amount_x_min",
          typeId: 17,
        },
        {
          name: "amount_y_min",
          typeId: 17,
        },
        {
          name: "active_id_desired",
          typeId: 16,
        },
        {
          name: "id_slippage",
          typeId: 16,
        },
        {
          name: "delta_ids",
          typeId: 14,
          typeArguments: [
            {
              name: "",
              typeId: 2,
            },
          ],
        },
        {
          name: "distribution_x",
          typeId: 14,
          typeArguments: [
            {
              name: "",
              typeId: 15,
            },
          ],
        },
        {
          name: "distribution_y",
          typeId: 14,
          typeArguments: [
            {
              name: "",
              typeId: 15,
            },
          ],
        },
        {
          name: "to",
          typeId: 4,
        },
        {
          name: "refund_to",
          typeId: 4,
        },
        {
          name: "deadline",
          typeId: 17,
        },
      ],
    },
    {
      type: "struct AddLiquidityResult",
      metadataTypeId: 8,
      components: [
        {
          name: "amount_x_added",
          typeId: 17,
        },
        {
          name: "amount_y_added",
          typeId: 17,
        },
        {
          name: "amount_x_refunded",
          typeId: 17,
        },
        {
          name: "amount_y_refunded",
          typeId: 17,
        },
        {
          name: "deposit_bin_ids",
          typeId: 14,
          typeArguments: [
            {
              name: "",
              typeId: 16,
            },
          ],
        },
        {
          name: "lp_token_minted",
          typeId: 11,
        },
      ],
    },
    {
      type: "struct interfaces::amm::Pool",
      metadataTypeId: 9,
      components: [
        {
          name: "asset_x",
          typeId: 11,
        },
        {
          name: "asset_y",
          typeId: 11,
        },
        {
          name: "bin_step",
          typeId: 15,
        },
        {
          name: "base_factor",
          typeId: 16,
        },
      ],
    },
    {
      type: "struct std::address::Address",
      metadataTypeId: 10,
      components: [
        {
          name: "bits",
          typeId: 1,
        },
      ],
    },
    {
      type: "struct std::asset_id::AssetId",
      metadataTypeId: 11,
      components: [
        {
          name: "bits",
          typeId: 1,
        },
      ],
    },
    {
      type: "struct std::contract_id::ContractId",
      metadataTypeId: 12,
      components: [
        {
          name: "bits",
          typeId: 1,
        },
      ],
    },
    {
      type: "struct std::vec::RawVec",
      metadataTypeId: 13,
      components: [
        {
          name: "ptr",
          typeId: 6,
        },
        {
          name: "cap",
          typeId: 17,
        },
      ],
      typeParameters: [5],
    },
    {
      type: "struct std::vec::Vec",
      metadataTypeId: 14,
      components: [
        {
          name: "buf",
          typeId: 13,
          typeArguments: [
            {
              name: "",
              typeId: 5,
            },
          ],
        },
        {
          name: "len",
          typeId: 17,
        },
      ],
      typeParameters: [5],
    },
    {
      type: "u16",
      metadataTypeId: 15,
    },
    {
      type: "u32",
      metadataTypeId: 16,
    },
    {
      type: "u64",
      metadataTypeId: 17,
    },
  ],
  functions: [
    {
      name: "main",
      inputs: [
        {
          name: "params",
          concreteTypeId:
            "d02ca4c5f77f360866d5afc1b1b857fb099ed9d7b17778929cf4ebebd22f53ba",
        },
      ],
      output:
        "7ebc691269f2134aec7a39e57821beec4db67e5ba6832cd78a4aab8bee73f5c1",
      attributes: [
        {
          name: "doc-comment",
          arguments: [
            " Adds liquidity to a pool according to the specified parameters",
          ],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [
            " This function adds liquidity to the specified pool using the provided configuration.",
          ],
        },
        {
          name: "doc-comment",
          arguments: [
            " It distributes tokens across multiple bins according to the distribution parameters",
          ],
        },
        {
          name: "doc-comment",
          arguments: [
            " and handles slippage protection through minimum amount requirements.",
          ],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [" # Arguments"],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [
            " * `params` - The parameters defining how to add liquidity",
          ],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [" # Returns"],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [
            " * `AddLiquidityResult` - The result containing amounts added, refunds, and LP tokens minted",
          ],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [" # Reverts"],
        },
        {
          name: "doc-comment",
          arguments: [""],
        },
        {
          name: "doc-comment",
          arguments: [" * When the transaction is executed after the deadline"],
        },
        {
          name: "doc-comment",
          arguments: [
            " * When slippage exceeds the minimum amount requirements",
          ],
        },
        {
          name: "doc-comment",
          arguments: [" * When insufficient tokens are provided"],
        },
        {
          name: "doc-comment",
          arguments: [" * When invalid distribution parameters are provided"],
        },
      ],
    },
  ],
  loggedTypes: [
    {
      logId: "10098701174489624218",
      concreteTypeId:
        "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a",
    },
    {
      logId: "13422313128416634537",
      concreteTypeId:
        "ba45a2ad0355e6a9ab4059f00cf03a1b23352843875b2a1550fbddf2b566a085",
    },
  ],
  messagesTypes: [],
  configurables: [
    {
      name: "POOL_CURVE_STATE",
      concreteTypeId:
        "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      offset: 12560,
      indirect: false,
    },
  ],
  errorCodes: {},
};

const bytecode = decompressBytecode(
  ""
);

export class AddLiquidity extends __Script<
  AddLiquidityInputs,
  AddLiquidityOutput
> {
  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(wallet: Account) {
    super(bytecode, abi, wallet);
  }
}
